import { useParams } from 'react-router-dom';
import data from '../data/donnees.json';
import LogementSlideshow from '../components/Logement/Fiche/LogementSlideshow.jsx';
import ErrorPage from './ErrorPage';
import Loueur from '../components/Logement/Fiche/Loueur.jsx';
import Tag from '../components/Logement/Fiche/Tag.jsx';
import Rating from '../components/Logement/Fiche/Rating.jsx';
import Collapse from '../components/Collapse.jsx';

import '../sass/Components/Logement/Fiche/Housing.scss';
import '../sass/Components/Logement/Fiche/Tag.scss';
import '../sass/Components/Logement/Fiche/Loueur.scss';

function Housing() {
  const { id } = useParams();
  const logement = data.find((item) => item.id === id);
  const title = logement.title;
  const localisation = logement.location;

  //gestion de l'erreur - logement non trouvé
  if (!logement) {
    return <ErrorPage />;
  }
  return (
    <main>
      <LogementSlideshow pictures={logement.pictures}></LogementSlideshow>
      <article className="fiche__logement">
        <div className="fiche__header">
          <div className="header__info">
            <h1>{title}</h1>
            <p>{localisation}</p>
            <Tag tags={logement.tags} />
          </div>
          <div className="header__host">
            <Loueur name={logement.host.name} picture={logement.host.picture} />
            <Rating rating={logement.rating} />
          </div>
        </div>
        <div className="collapses__container">
          <Collapse title="Description" content={logement.description} />
          <Collapse title="Équipements" content={logement.equipments} />
        </div>
      </article>
    </main>
  );
}
export default Housing;



import React, { useState, useRef, useEffect } from 'react';
import '../sass/Components/Collapse.scss';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faChevronUp } from '@fortawesome/free-solid-svg-icons';

function Collapse({ title, content }) {
  const [isOpen, setIsOpen] = useState(false);
  const [contentHeight, setContentHeight] = useState('0px');
  const contentRef = useRef(null);

  const toggleCollapse = () => {
    setIsOpen(!isOpen);
  };

  useEffect(() => {
    // on s'assure que la référence existe pour éviter les erreurs
    if (contentRef.current) {
      // on utilise un setTimeout pour s'assurer que le DOM a bien rendu le contenu
      setTimeout(() => {
        const height = isOpen ? `${contentRef.current.scrollHeight}px` : '0px';
        setContentHeight(height);
        console.log(`setTimeout appelé. Hauteur calculée : ${height}`);
      }, 0); // le délai 0 permet de décaler l'exécution à la prochaine boucle d'événement
    }
  }, [isOpen, content]); // on ajoute 'content' aux dépendances pour recalculer si le contenu change

  return (
    <div className="collapse">
      <div className="collapse_header" onClick={toggleCollapse}>
        <h2 className="collapse__title">{title}</h2>
        <FontAwesomeIcon
          icon={faChevronUp}
          className={`collapse__arrow ${isOpen ? 'rotate' : ''}`}
        />
      </div>
      <div
        className={`collapse__content ${isOpen ? 'open' : ''}`}
        style={{ maxHeight: contentHeight }}
      >
        <div className="collapse__inner" ref={contentRef}>
          {Array.isArray(content) ? (
            <ul>
              {content.map((item, index) => (
                <li key={index}>{item}</li>
              ))}
            </ul>
          ) : (
            <p>{content}</p>
          )}
        </div>
      </div>
    </div>
  );
}

export default Collapse;



       if (window.innerWidth < 1200) {
          newMaxHeight = newMaxHeight * 1.8;
        }



        import React, { forwardRef, useRef, useEffect, useState } from 'react';
import '../sass/Components/Collapse.scss';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faChevronUp } from '@fortawesome/free-solid-svg-icons';

const Collapse = forwardRef(
  ({ title, content, isOpen, onToggle, syncHeight }, ref) => {
    const innerRef = useRef(null);
    const [currentHeight, setCurrentHeight] = useState('0px');

    //Suite à un clique sur un collapse
    useEffect(() => {
      if (isOpen) {
        setCurrentHeight(syncHeight);
      } else {
        setCurrentHeight('0px');
      }
    }, [isOpen, syncHeight]);

    return (
      <div className="collapse">
        <div className="collapse_header" onClick={onToggle}>
          <h2 className="collapse__title">{title}</h2>
          <FontAwesomeIcon
            icon={faChevronUp}
            className={`collapse__arrow ${isOpen ? 'rotate' : ''}`}
          />
        </div>
        <div
          className={`collapse__content ${isOpen ? 'open' : ''}`}
          style={{
            maxHeight: currentHeight,
            height: currentHeight,
          }}
          ref={ref}
        >
          <div className="collapse__inner" ref={innerRef}>
            {Array.isArray(content) ? (
              <ul>
                {content.map((item, index) => (
                  <li key={index}>{item}</li>
                ))}
              </ul>
            ) : (
              <p>{content}</p>
            )}
          </div>
        </div>
      </div>
    );
  }
);

export default Collapse;
